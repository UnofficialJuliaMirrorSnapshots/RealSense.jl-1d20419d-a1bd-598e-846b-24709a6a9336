@static if Sys.iswindows()
    include(joinpath(@__DIR__, "build_windows.jl"))
else

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# workaround for https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/194
Core.eval(Module(:__anon__), :(Main.include($(joinpath(@__DIR__, "build_libusb.v1.0.22.jl")))))

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["librealsense2"], :librealsense2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPerception/LibRealSenseBuilder/releases/download/v2.15.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/librealsense.v2.15.0.aarch64-linux-gnu.tar.gz", "2749c057ce09db70c65750e1af38ce9e5341f214160f8287ceb5fcf9769cd968"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/librealsense.v2.15.0.arm-linux-gnueabihf.tar.gz", "4e27b30fb280034cd1cb95073a406dee8b54ccf10971e49ec2d48d87339a9ff3"),
    Linux(:i686, :glibc) => ("$bin_prefix/librealsense.v2.15.0.i686-linux-gnu.tar.gz", "608dbe4fbee642dacbbd4fcfc0e81246e2ec7bfad5de8d99041eb08d4ffb87e4"),
    MacOS(:x86_64) => ("$bin_prefix/librealsense.v2.15.0.x86_64-apple-darwin14.tar.gz", "115bad0c67debf1ae34a604fdbb5d765f5a96cea51c39bc23cb137fd086db51d"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/librealsense.v2.15.0.x86_64-linux-gnu.tar.gz", "f90b3bbc3a1d6690bc5f5b1f26558cafb20cc630136c5229133ee7c649aaea9d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

end # @static if Sys.iswindows()
