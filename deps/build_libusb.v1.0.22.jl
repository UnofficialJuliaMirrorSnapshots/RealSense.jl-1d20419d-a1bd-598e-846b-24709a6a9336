using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libusb"], :libusb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPerception/LibusbBuilder/releases/download/v1.0.22-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/libusb.v1.0.22.aarch64-linux-gnu.tar.gz", "2bc43c36113d927b269bea41ba6e275b8b176598639cef8a39257e5e2ee6eb38"),
    Linux(:aarch64, :musl) => ("$bin_prefix/libusb.v1.0.22.aarch64-linux-musl.tar.gz", "fa18880e763c804d90e613dc7c9b4a88a2347f82edf900b1a803551a1130ee95"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/libusb.v1.0.22.arm-linux-gnueabihf.tar.gz", "b1d88997cf18a45a5c07998eaed144185122869dfb4026a5c24cd6b4d6a1eabb"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/libusb.v1.0.22.arm-linux-musleabihf.tar.gz", "e9c696404dc945ac0206a6c68eb6f4cb45d9e011b6bf6b6aa93dbb4d3bcca65f"),
    Linux(:i686, :glibc) => ("$bin_prefix/libusb.v1.0.22.i686-linux-gnu.tar.gz", "e77ebe2c677db539549085e94d5a40c6136e792b8ba90f08e4879a303061c2f1"),
    Linux(:i686, :musl) => ("$bin_prefix/libusb.v1.0.22.i686-linux-musl.tar.gz", "767233024788c16353af6b5c33dc4af2bac92a49f75baed4eb5b9141b433f9d6"),
    Windows(:i686) => ("$bin_prefix/libusb.v1.0.22.i686-w64-mingw32.tar.gz", "22b3842acea72349a66e30b6a81ac1e49dc0f8432428f26ac8ac6ce81b5258f2"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/libusb.v1.0.22.powerpc64le-linux-gnu.tar.gz", "ee15a8d5b4431e683715be57a87a3ee62b4a3b5553d3826e969f0fb109cd545f"),
    MacOS(:x86_64) => ("$bin_prefix/libusb.v1.0.22.x86_64-apple-darwin14.tar.gz", "7213991f80c8a4ee11dae2d621595ed613a9692aed48c4cfec84ed982842eef0"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/libusb.v1.0.22.x86_64-linux-gnu.tar.gz", "79bd44e313b462b2ccaa03296be1e729b1a53b85914be7c7c68a39d23584fb5b"),
    Linux(:x86_64, :musl) => ("$bin_prefix/libusb.v1.0.22.x86_64-linux-musl.tar.gz", "b3b13626d1c89ed61957c22320e18353a504f2bb7664f01e68e551ae2eb2cef3"),
    Windows(:x86_64) => ("$bin_prefix/libusb.v1.0.22.x86_64-w64-mingw32.tar.gz", "8750ae158df29259f6938fd4981c46d441c05359ef74bb28235797ebed96d57a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
